{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAAAC,GACpB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAK,UAAUC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BACvB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAAAR,GAExB,OACI,qBAAKC,UAAU,YAAf,SAEMD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCPpBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAO,uBACFZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCJG,EArCf,kDACE,aAAe,IAAD,8BACZ,gBAcJH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbnC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,EADhB,qDAUA,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAU,CAAET,SAAWkB,SAb7C,oBAoBE,WAAU,IAAD,EACyBC,KAAKN,MAA9Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAY,MAAjB,UACE,kDACC,cAAC,EAAD,CACCW,YAAc,kBACdC,aAAgBe,KAAKf,eACvB,cAAC,EAAD,CAAUJ,SAAUoB,WA/B5B,GAAyBI,aCMVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7cb7006a.chunk.js","sourcesContent":["import React from 'react'\nimport '../card/card.styles.css'\nexport const Card = props =>{\nreturn(\n    <div className='card-container'>\n        <img alt= 'monster' src= {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n\n    </div>\n)\n}","import React from 'react';\nimport '../card-list/card-list.styles.css'\nimport { Card } from '../card/card.component'\n\nexport const CardList = props => {\n\nreturn(\n    <div className='card-list'>\n        {\n          props.monsters.map(monster => (\n              <Card key={monster.id} monster={monster}/>\n          ))\n        } \n    </div>\n)}","import React from 'react'\nimport '../search-box/search-box.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n    return(<input \n         className='search'\n         type='search'\n         placeholder={placeholder}\n         onChange={handleChange}/>\n)}","import './App.css';\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nimport React, { Component } from 'react'\n\nexport class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\ncomponentDidMount() {\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(response => response.json())\n  .then(users => this.setState ({ monsters : users}))\n}\n\nhandleChange = e => {\n  this.setState({searchField: e.target.value})\n}\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className = 'App'>\n        <h1>Monsters Rolodex</h1>\n         <SearchBox\n          placeholder = 'search monsters'\n          handleChange = {this.handleChange}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}